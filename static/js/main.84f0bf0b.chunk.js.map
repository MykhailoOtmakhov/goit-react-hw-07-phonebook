{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactsItem/ContactsItem.module.css","components/Notification/Notification.module.css","components/Filter/Filter.module.css","components/Header/Header.module.css","components/Contacts/Contacts.module.css","redux/contacts-actions.js","redux/contacts-operations.js","components/Notification/Notification.js","components/ContactForm/ContactForm.js","components/ContactsItem/ContactsItem.js","redux/contacts-selectors.js","components/Contacts/Contacts.js","components/Filter/Filter.js","components/Header/Header.js","App.js","reportWebVitals.js","redux/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","dispatch","a","get","data","message","name","number","contact","id","uuidv4","post","then","catch","error","contactId","delete","Notification","className","styles","notificationContainer","text","ContactForm","state","handleInputChange","evt","currentTarget","value","setState","getNoty","note","setTimeout","handleSubmit","preventDefault","props","contacts","items","find","item","toLowerCase","onSubmit","reset","this","CSSTransition","in","timeout","classNames","unmountOnExit","form","label","htmlFor","nameInputId","input","type","onChange","numberInputId","button","onClick","Component","connect","contactsOperation","ContactsItem","onRemove","defaultProps","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","allContacts","normalizedFilter","includes","contactsSelectors","onRemoveContact","contactsOperations","clearFilter","contactsActions","TransitionGroup","component","map","handleRemoveContact","e","target","Header","appear","maintitle","App","fetchContact","length","isLoadingContacts","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","next","action","logger","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84f0bf0b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__3AxyV\",\"input\":\"ContactForm_input__3URwQ\",\"button\":\"ContactForm_button__Z634d\",\"form\":\"ContactForm_form__30C7H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactsItem_item__Jlpjq\",\"name\":\"ContactsItem_name__2VzKD\",\"button\":\"ContactsItem_button__1nVnP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Notification_text__1nVat\",\"notificationContainer\":\"Notification_notificationContainer__5DCGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__BAoAZ\",\"input\":\"Filter_input__3Aef2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"maintitle\":\"Header_maintitle__3iLAh\",\"appear\":\"Header_appear__3znpH\",\"appearActive\":\"Header_appearActive__klgaN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Contacts_enter__Efrp7\",\"enterActive\":\"Contacts_enterActive__13HyO\",\"exit\":\"Contacts_exit__Dxolt\",\"exitActive\":\"Contacts_exitActive__2JPuG\"};","// import { v4 as uuidv4 } from 'uuid'\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const removeContactRequest = createAction('contacts/removeContactRequest');\r\nexport const removeContactSuccess = createAction('contacts/removeContactSuccess');\r\nexport const removeContactError = createAction('contacts/removeContactError');\r\n\r\n\r\n// export const removeContact = createAction('contacts/Remove')\r\n\r\nexport const changeFilter = createAction('contacts/ChangeFilter');\r\n\r\n// export default { addContactRequest, addContactSuccess, addContactError,  removeContact, changeFilter }","import axios from 'axios'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { \r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError, \r\n    addContactRequest, \r\n    addContactSuccess, \r\n    addContactError, \r\n    removeContactRequest, \r\n    removeContactSuccess, \r\n    removeContactError \r\n} from './contacts-actions'\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContact = () => async dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    try {\r\n        const {data} = await axios.get('/contacts');\r\n\r\n        dispatch(fetchContactSuccess(data))\r\n    } catch (error) {\r\n        dispatch(fetchContactError(error.message))\r\n    }\r\n\r\n    // axios\r\n    //     .get('/contacts')\r\n    //     .then(({data}) => \r\n    //         dispatch(fetchContactSuccess(data)))\r\n    //     .catch(error => dispatch(fetchContactError(error.message)));\r\n}\r\n\r\nconst addContact = (name,number,message) => dispatch => {\r\n    const contact = {\r\n        id: uuidv4(),\r\n        name,\r\n        number,\r\n        message\r\n    };\r\n\r\n    dispatch(addContactRequest())\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => \r\n            dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error.message)))\r\n    }\r\n\r\n\r\nconst removeContact = contactId => dispatch => {\r\n    dispatch(removeContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(removeContactSuccess(contactId)))\r\n        .catch(error => dispatch(removeContactError(error.message)))\r\n}\r\n    export default {\r\n        fetchContact,\r\n        addContact,\r\n        removeContact\r\n    }\r\n","import React from 'react'\r\nimport styles from './Notification.module.css';\r\n\r\nconst Notification = ({message}) => (\r\n    <div className={styles.notificationContainer}>\r\n        <p className={styles.text}>{message}</p>\r\n    </div>\r\n)\r\n\r\nexport default Notification","import React, { Component } from 'react';\r\nimport styles from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperation from '../../redux/contacts-operations'\r\nimport Notification from '../Notification/Notification'\r\nimport { CSSTransition } from 'react-transition-group'\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n          name: '',\r\n          number: '',\r\n          message: null,   \r\n    }\r\n\r\n    handleInputChange=evt=>{\r\n      const {name, value}= evt.currentTarget;\r\n      this.setState({\r\n        [name]: value,\r\n      })\r\n    }\r\n\r\n    getNoty = (note) => {\r\n      this.setState({message: note});\r\n      setTimeout(()=> {\r\n        this.setState({ message: null});\r\n      }, 2500)\r\n    }\r\n\r\n    handleSubmit=evt=>{\r\n        const { name, number } = this.state;\r\n        evt.preventDefault();\r\n\r\n        if (this.props.contacts.items.find((item) => item.name.toLowerCase() === this.state.name.toLowerCase())) {\r\n          this.getNoty('This contact is already exist!');\r\n          return;\r\n        }\r\n        \r\n        if (name ===''){\r\n          this.getNoty('Enter the name!');\r\n          return;\r\n        }\r\n\r\n        if (number ===''){\r\n          this.getNoty('Enter the number!');\r\n          return;\r\n        }\r\n\r\n        this.props.onSubmit(this.state);\r\n        this.reset()\r\n    }\r\n\r\n    reset=()=>{\r\n        this.setState({name: '', number: '',});\r\n    }\r\n    \r\n    render() {\r\n      const { message }= this.state;\r\n        return (\r\n          <div>\r\n            <CSSTransition\r\n              in={message} \r\n              timeout={250}\r\n              classNames=\"notification\"\r\n              unmountOnExit>\r\n                <Notification message={this.state.message}/>\r\n            </CSSTransition>\r\n            <form \r\n              onSubmit={this.handleSubmit}\r\n              className={styles.form}>\r\n              <label \r\n                className={styles.label}\r\n                htmlFor={this.nameInputId}>\r\n                    Name\r\n                <input \r\n                  className={styles.input}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={this.state.name}\r\n                  onChange={this.handleInputChange}\r\n                  id={this.nameInputId}\r\n                />\r\n              </label>\r\n              <label \r\n              className={styles.label}\r\n              htmlFor={this.numberInputId}>\r\n                  Number\r\n                <input \r\n                  className={styles.input}\r\n                  type=\"tel\"\r\n                  name=\"number\"\r\n                  value={this.state.number}\r\n                  onChange={this.handleInputChange}\r\n                  id={this.numberInputId}\r\n                />\r\n              </label>\r\n              <button \r\n                className={styles.button}\r\n                type=\"submit\" \r\n                onClick={this.handleSubmit}\r\n              >\r\n                Add contact\r\n              </button>\r\n            </form>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: ({name,number,message}) => dispatch(contactsOperation.addContact(name,number,message))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm)\r\n\r\n","import React from 'react';\r\nimport styles from './ContactsItem.module.css';\r\nimport PropTypes from 'prop-types'\r\n// import styles from './Contacts.module.css'\r\n\r\nconst ContactsItem = ({name, number, onRemove})=>(\r\n    <li \r\n    className={styles.item}\r\n    >\r\n        <p \r\n        className={styles.name}>\r\n            {name}-{number}</p>\r\n        <button \r\n            className={styles.button}\r\n            onClick={onRemove}> \r\n            Delete\r\n        </button>\r\n    </li>  \r\n) \r\nContactsItem.propTypes={\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n}\r\nContactsItem.defaultProps = {\r\n   name: '',\r\n   number: '',\r\n}\r\nexport default ContactsItem;\r\n    \r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (allContacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        \r\n        return allContacts.filter(({name})=>\r\n            name.toLowerCase().includes(normalizedFilter),\r\n        )\r\n    }\r\n)\r\n\r\nexport default {\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleContacts\r\n}\r\n\r\n// const getVisibleContacts = state => {\r\n//     const allContacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n\r\n//     return allContacts.filter(({name})=>\r\n//         name.toLowerCase().includes(normalizedFilter),\r\n//     )\r\n// }","import React from 'react';\r\nimport ContactsItem from '../ContactsItem/ContactsItem';\r\nimport PropTypes from 'prop-types'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport styles from './Contacts.module.css'\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts-operations'\r\nimport * as contactsActions from '../../redux/contacts-actions'\r\nimport contactsSelectors from '../../redux/contacts-selectors'\r\n\r\nconst Contacts = ({contacts,onRemoveContact,clearFilter}) => {\r\n    \r\n    const handleRemoveContact = id => {\r\n        onRemoveContact(id);\r\n        clearFilter()\r\n    }\r\n\r\n    return(\r\n        <TransitionGroup \r\n            component=\"ul\" \r\n            className=\"ContactsList\"\r\n            >\r\n                <h2>Contacts</h2>\r\n                {contacts.map(({id,name,number})=>(\r\n                    <CSSTransition \r\n                        key={id}\r\n                        timeout={2500}\r\n                        classNames={styles}\r\n                        >\r\n                        <ContactsItem \r\n                            id={id}\r\n                            name={name}\r\n                            number={number}\r\n                            onRemove={()=>handleRemoveContact(id)}\r\n                        />\r\n                    </CSSTransition>                   \r\n                ))}\r\n        </TransitionGroup>                       \r\n    )\r\n}\r\nContacts.propTypes={\r\n    id:PropTypes.string,\r\n    name:PropTypes.string,\r\n    number:PropTypes.string,\r\n}\r\n\r\nconst mapStateToProps =(state)=> ({\r\n    contacts: contactsSelectors.getVisibleContacts(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onRemoveContact: (id) => dispatch(contactsOperations.removeContact(id)),\r\n    clearFilter:() => dispatch(contactsActions.changeFilter(''))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts)","import React from 'react'\r\nimport styles from './Filter.module.css'\r\nimport { connect } from 'react-redux'\r\nimport * as contactsActions from '../../redux/contacts-actions'\r\nimport contactsSelectors from '../../redux/contacts-selectors'\r\n\r\nconst Filter =({value, onChange})=>{\r\n    return(\r\n        <label\r\n            className={styles.label}\r\n        >\r\n        Find contacts by name:\r\n            <input \r\n                className={styles.input}\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                value={value}   \r\n                onChange={onChange} \r\n            />                    \r\n        </label>\r\n    ) \r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    value: contactsSelectors.getFilter(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)\r\n    \r\n\r\n  \r\n","import React from 'react'\r\nimport styles from './Header.module.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nconst Header = () => (\r\n    <CSSTransition \r\n        in={true}\r\n        appear={true}\r\n        timeout={500}\r\n        classNames={styles}>\r\n        <header>\r\n            <h1 className={styles.maintitle}>Phonebook</h1>\r\n        </header>\r\n    </CSSTransition>\r\n)\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport Contacts from './components/Contacts/Contacts';\r\nimport Filter from './components/Filter/Filter';\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport './App.css'\r\nimport Header from './components/Header/Header.js';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from './redux/contacts-operations';\r\nimport contactsSelectors from './redux/contacts-selectors'\r\n\r\nclass App extends Component {  \r\n\r\n  componentDidMount(){\r\n    this.props.fetchContact()\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n      <div>\r\n        <Header />\r\n        <ContactForm />\r\n        <CSSTransition \r\n          in={this.props.contacts.length>1}\r\n          timeout={250}\r\n          classNames=\"container\"\r\n          unmountOnExit>\r\n            <Filter/>\r\n        </CSSTransition>\r\n        <CSSTransition \r\n          in={this.props.contacts.length>0}\r\n          timeout={250}\r\n          classNames=\"container\"\r\n          unmountOnExit>\r\n            <Contacts />\r\n        </CSSTransition>       \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContact: () => dispatch(contactsOperations.fetchContact())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport { \r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    addContactRequest,\r\n    addContactSuccess, \r\n    addContactError, \r\n    removeContactRequest, \r\n    removeContactSuccess, \r\n    removeContactError, \r\n    changeFilter \r\n} from './contacts-actions'\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactSuccess]: (_, { payload }) => payload,\r\n    [addContactSuccess]: (state,{ payload }) => [...state, payload],\r\n    // [actions.addContact]: (state,{ payload }) => [...state, payload],\r\n    [removeContactSuccess]: (state,{ payload }) => state.filter(({id})=>id !== payload)\r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload, \r\n})\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [removeContactRequest]: () => true,\r\n    [removeContactSuccess]: () => false,\r\n    [removeContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n    error\r\n})\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts-reducer'\r\nimport logger from 'redux-logger'\r\n// import storage from 'redux-persist/lib/storage'\r\nimport {\r\n    // persistStore,\r\n    // persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER\r\n  } from 'redux-persist';\r\n\r\n// const contactsPersistConfig = {\r\n//     key: 'contacts',\r\n//     storage,\r\n//     blacklist: ['filter'],\r\n// }\r\n\r\nconst myMiddleware = store => next => action => {\r\n\r\n  next(action);\r\n}\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n    }\r\n  }), \r\n  myMiddleware,\r\n  logger,\r\n]\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV ==='development',\r\n})\r\n\r\n// const persistor = persistStore(store)\r\n\r\nexport default \r\n// { \r\n  store\r\n  // , persistor };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/store'\r\nimport { Provider } from 'react-redux'\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n   <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n       <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}