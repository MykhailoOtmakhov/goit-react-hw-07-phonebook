{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import ContactsItem from'../ContactsItem/ContactsItem';import{CSSTransition,TransitionGroup}from'react-transition-group';import styles from'./Contacts.module.css';import{connect}from'react-redux';import contactsActions from'../../redux/contacts-actions';var Contacts=function Contacts(_ref){var contacts=_ref.contacts,onRemoveContact=_ref.onRemoveContact;return/*#__PURE__*/_jsxs(TransitionGroup,{component:\"ul\",className:\"ContactsList\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Contacts\"}),contacts.map(function(_ref2){var id=_ref2.id,name=_ref2.name,number=_ref2.number;return/*#__PURE__*/_jsx(CSSTransition,{timeout:2500,classNames:styles,children:/*#__PURE__*/_jsx(ContactsItem,{id:id,name:name,number:number,onRemove:function onRemove(){return onRemoveContact(id);}})},id);})]});};var getVisibleContacts=function getVisibleContacts(allContacts,filter){var normalizedFilter=filter.toLowerCase();return allContacts.filter(function(_ref3){var name=_ref3.name;return name.toLowerCase().includes(normalizedFilter);});};var mapStateToProps=function mapStateToProps(_ref4){var _ref4$contacts=_ref4.contacts,items=_ref4$contacts.items,filter=_ref4$contacts.filter;return{contacts:getVisibleContacts(items,filter)};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onRemoveContact:function onRemoveContact(id){return dispatch(contactsActions.removeContact(id),dispatch(contactsActions.changeFilter('')));}};};export default connect(mapStateToProps,mapDispatchToProps)(Contacts);","map":{"version":3,"sources":["D:/projects/GitHub/goit-react-hw-06-phonebook/src/components/Contacts/Contacts.js"],"names":["React","ContactsItem","CSSTransition","TransitionGroup","styles","connect","contactsActions","Contacts","contacts","onRemoveContact","map","id","name","number","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","includes","mapStateToProps","items","mapDispatchToProps","dispatch","removeContact","changeFilter"],"mappings":"wFAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,8BAAzB,CAEA,OAASC,aAAT,CAAwBC,eAAxB,KAA+C,wBAA/C,CACA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,eAAP,KAA4B,8BAA5B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAgC,IAA9BC,CAAAA,QAA8B,MAA9BA,QAA8B,CAArBC,eAAqB,MAArBA,eAAqB,CAC7C,mBACI,MAAC,eAAD,EACI,SAAS,CAAC,IADd,CAEI,SAAS,CAAC,cAFd,wBAIQ,gCAJR,CAKSD,QAAQ,CAACE,GAAT,CAAa,mBAAEC,CAAAA,EAAF,OAAEA,EAAF,CAAKC,IAAL,OAAKA,IAAL,CAAUC,MAAV,OAAUA,MAAV,oBACV,KAAC,aAAD,EAEI,OAAO,CAAE,IAFb,CAGI,UAAU,CAAET,MAHhB,uBAKI,KAAC,YAAD,EACI,EAAE,CAAEO,EADR,CAEI,IAAI,CAAEC,IAFV,CAGI,MAAM,CAAEC,MAHZ,CAII,QAAQ,CAAE,0BAAIJ,CAAAA,eAAe,CAACE,EAAD,CAAnB,EAJd,EALJ,EACSA,EADT,CADU,EAAb,CALT,GADJ,CAuBH,CAxBD,CA+BA,GAAMG,CAAAA,kBAAkB,CAAC,QAAnBA,CAAAA,kBAAmB,CAACC,WAAD,CAAcC,MAAd,CAAyB,CAChD,GAAMC,CAAAA,gBAAgB,CAAGD,MAAM,CAACE,WAAP,EAAzB,CAEA,MAAOH,CAAAA,WAAW,CAACC,MAAZ,CAAmB,mBAAEJ,CAAAA,IAAF,OAAEA,IAAF,OACxBA,CAAAA,IAAI,CAACM,WAAL,GAAmBC,QAAnB,CAA4BF,gBAA5B,CADwB,EAAnB,CAAP,CAGD,CAND,CAQA,GAAMG,CAAAA,eAAe,CAAE,QAAjBA,CAAAA,eAAiB,iCAAGZ,QAAH,CAAea,KAAf,gBAAeA,KAAf,CAAsBL,MAAtB,gBAAsBA,MAAtB,OAAqC,CACxDR,QAAQ,CAAEM,kBAAkB,CAACO,KAAD,CAAQL,MAAR,CAD4B,CAArC,EAAvB,CAIA,GAAMM,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CACpCd,eAAe,CAAE,yBAACE,EAAD,QAAQY,CAAAA,QAAQ,CAACjB,eAAe,CAACkB,aAAhB,CAA8Bb,EAA9B,CAAD,CAAmCY,QAAQ,CAACjB,eAAe,CAACmB,YAAhB,CAA6B,EAA7B,CAAD,CAA3C,CAAhB,EADmB,CAAL,EAAnC,CAIA,cAAepB,CAAAA,OAAO,CAACe,eAAD,CAAkBE,kBAAlB,CAAP,CAA6Cf,QAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport ContactsItem from '../ContactsItem/ContactsItem';\r\nimport PropTypes from 'prop-types'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport styles from './Contacts.module.css'\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts-actions'\r\n\r\nconst Contacts = ({contacts,onRemoveContact}) => {\r\n    return(\r\n        <TransitionGroup \r\n            component=\"ul\" \r\n            className=\"ContactsList\"\r\n            >\r\n                <h2>Contacts</h2>\r\n                {contacts.map(({id,name,number})=>(\r\n                    <CSSTransition \r\n                        key={id}\r\n                        timeout={2500}\r\n                        classNames={styles}\r\n                        >\r\n                        <ContactsItem \r\n                            id={id}\r\n                            name={name}\r\n                            number={number}\r\n                            onRemove={()=>onRemoveContact(id)}\r\n                        />\r\n                    </CSSTransition>\r\n                    \r\n                ))}\r\n        </TransitionGroup>                       \r\n    )\r\n}\r\nContacts.propTypes={\r\n    id:PropTypes.string,\r\n    name:PropTypes.string,\r\n    number:PropTypes.string,\r\n}\r\n\r\nconst getVisibleContacts=(allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(({name})=>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  )\r\n}\r\n\r\nconst mapStateToProps =({ contacts: { items, filter } })=> ({\r\n    contacts: getVisibleContacts(items, filter),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onRemoveContact: (id) => dispatch(contactsActions.removeContact(id),dispatch(contactsActions.changeFilter('')))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts)\r\n"]},"metadata":{},"sourceType":"module"}