{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\projects\\\\GitHub\\\\goit-react-hw-06-phonebook\\\\src\\\\components\\\\Contacts\\\\Contacts.js\";\n// import React from 'react';\n// import ContactsItem from '../ContactsItem/ContactsItem';\n// import PropTypes from 'prop-types'\n// import { CSSTransition, TransitionGroup } from 'react-transition-group'\n// import styles from './Contacts.module.css'\n// const Contacts = ({contacts,onRemoveContact}) => {\n//     return(\n//         <TransitionGroup \n//             component=\"ul\" \n//             className=\"ContactsList\"\n//             >\n//                 <h2>Contacts</h2>\n//                 {contacts.map(({id,name,number})=>(\n//                     <CSSTransition \n//                         key={id}\n//                         timeout={2500}\n//                         classNames={styles}\n//                         >\n//                         <ContactsItem \n//                             id={id}\n//                             name={name}\n//                             number={number}\n//                             onRemove={()=>onRemoveContact(id)}\n//                         />\n//                     </CSSTransition>\n//                 ))}\n//         </TransitionGroup>                       \n//     )\n// }\n// Contacts.propTypes={\n//     id:PropTypes.string,\n//     name:PropTypes.string,\n//     number:PropTypes.string,\n// }\n// Contacts.defaultProps = {\n//     id: '',\n//     name: '',\n//     number: '',\n// }\n// export default Contacts;\nimport React from 'react';\nimport ContactsItem from '../ContactsItem/ContactsItem';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport styles from './Contacts.module.css';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts-actions';\n\nconst Contacts = ({\n  contacts,\n  onRemoveContact\n}) =>\n/*#__PURE__*/\n// return(\n_jsxDEV(TransitionGroup, {\n  component: \"ul\",\n  className: \"ContactsList\",\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Contacts\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 17\n  }, this), contacts.map(({\n    id,\n    name,\n    number\n  }) => /*#__PURE__*/_jsxDEV(CSSTransition, {\n    timeout: 2500,\n    classNames: styles,\n    children: /*#__PURE__*/_jsxDEV(ContactsItem, {\n      id: id,\n      name: name,\n      number: number,\n      onRemove: () => onRemoveContact(id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }, this)\n  }, id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 21\n  }, this))]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 54,\n  columnNumber: 9\n}, this) // )\n;\n\n_c = Contacts;\nContacts.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string\n};\nContacts.defaultProps = {\n  id: '',\n  name: '',\n  number: ''\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter(({\n    name\n  }) => name.toLowerCase().includes(normalizedFilter));\n};\n\nconst mapStateToProps = ({\n  contacts: {\n    items,\n    filter\n  }\n}) => ({\n  contacts: getVisibleContacts(items, filter)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemoveContact: id => dispatch(contactsActions.removeContact(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n\nvar _c;\n\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"sources":["D:/projects/GitHub/goit-react-hw-06-phonebook/src/components/Contacts/Contacts.js"],"names":["React","ContactsItem","PropTypes","CSSTransition","TransitionGroup","styles","connect","contactsActions","Contacts","contacts","onRemoveContact","map","id","name","number","propTypes","string","defaultProps","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","includes","mapStateToProps","items","mapDispatchToProps","dispatch","removeContact"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,wBAA/C;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAUC,EAAAA;AAAV,CAAD;AAAA;AACb;AACI,QAAC,eAAD;AACI,EAAA,SAAS,EAAC,IADd;AAEI,EAAA,SAAS,EAAC,cAFd;AAAA,0BAIQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJR,EAKSD,QAAQ,CAACE,GAAT,CAAa,CAAC;AAACC,IAAAA,EAAD;AAAIC,IAAAA,IAAJ;AAASC,IAAAA;AAAT,GAAD,kBACV,QAAC,aAAD;AAEI,IAAA,OAAO,EAAE,IAFb;AAGI,IAAA,UAAU,EAAET,MAHhB;AAAA,2BAKI,QAAC,YAAD;AACI,MAAA,EAAE,EAAEO,EADR;AAEI,MAAA,IAAI,EAAEC,IAFV;AAGI,MAAA,MAAM,EAAEC,MAHZ;AAII,MAAA,QAAQ,EAAE,MAAIJ,eAAe,CAACE,EAAD;AAJjC;AAAA;AAAA;AAAA;AAAA;AALJ,KACSA,EADT;AAAA;AAAA;AAAA;AAAA,UADH,CALT;AAAA;AAAA;AAAA;AAAA;AAAA,QAFS,CAsBb;AAtBJ;;KAAMJ,Q;AAyBNA,QAAQ,CAACO,SAAT,GAAmB;AACfH,EAAAA,EAAE,EAACV,SAAS,CAACc,MADE;AAEfH,EAAAA,IAAI,EAACX,SAAS,CAACc,MAFA;AAGfF,EAAAA,MAAM,EAACZ,SAAS,CAACc;AAHF,CAAnB;AAKAR,QAAQ,CAACS,YAAT,GAAwB;AACpBL,EAAAA,EAAE,EAAE,EADgB;AAEpBC,EAAAA,IAAI,EAAE,EAFc;AAGpBC,EAAAA,MAAM,EAAE;AAHY,CAAxB;;AAMA,MAAMI,kBAAkB,GAAC,CAACC,WAAD,EAAcC,MAAd,KAAyB;AAChD,QAAMC,gBAAgB,GAAGD,MAAM,CAACE,WAAP,EAAzB;AAEA,SAAOH,WAAW,CAACC,MAAZ,CAAmB,CAAC;AAACP,IAAAA;AAAD,GAAD,KACxBA,IAAI,CAACS,WAAL,GAAmBC,QAAnB,CAA4BF,gBAA5B,CADK,CAAP;AAGD,CAND;;AAQA,MAAMG,eAAe,GAAE,CAAC;AAAEf,EAAAA,QAAQ,EAAE;AAACgB,IAAAA,KAAD;AAAQL,IAAAA;AAAR;AAAZ,CAAD,MAAkC;AACrDX,EAAAA,QAAQ,EAAES,kBAAkB,CAACO,KAAD,EAAQL,MAAR;AADyB,CAAlC,CAAvB;;AAIA,MAAMM,kBAAkB,GAAGC,QAAQ,KAAK;AACpCjB,EAAAA,eAAe,EAAGE,EAAD,IAAQe,QAAQ,CAACpB,eAAe,CAACqB,aAAhB,CAA8BhB,EAA9B,CAAD;AADG,CAAL,CAAnC;;AAIA,eAAeN,OAAO,CAACkB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ClB,QAA7C,CAAf","sourcesContent":["// import React from 'react';\r\n// import ContactsItem from '../ContactsItem/ContactsItem';\r\n// import PropTypes from 'prop-types'\r\n// import { CSSTransition, TransitionGroup } from 'react-transition-group'\r\n// import styles from './Contacts.module.css'\r\n\r\n// const Contacts = ({contacts,onRemoveContact}) => {\r\n//     return(\r\n//         <TransitionGroup \r\n//             component=\"ul\" \r\n//             className=\"ContactsList\"\r\n//             >\r\n//                 <h2>Contacts</h2>\r\n//                 {contacts.map(({id,name,number})=>(\r\n//                     <CSSTransition \r\n//                         key={id}\r\n//                         timeout={2500}\r\n//                         classNames={styles}\r\n//                         >\r\n//                         <ContactsItem \r\n//                             id={id}\r\n//                             name={name}\r\n//                             number={number}\r\n//                             onRemove={()=>onRemoveContact(id)}\r\n//                         />\r\n//                     </CSSTransition>\r\n//                 ))}\r\n//         </TransitionGroup>                       \r\n//     )\r\n// }\r\n// Contacts.propTypes={\r\n//     id:PropTypes.string,\r\n//     name:PropTypes.string,\r\n//     number:PropTypes.string,\r\n// }\r\n// Contacts.defaultProps = {\r\n//     id: '',\r\n//     name: '',\r\n//     number: '',\r\n// }\r\n// export default Contacts;\r\n\r\n\r\nimport React from 'react';\r\nimport ContactsItem from '../ContactsItem/ContactsItem';\r\nimport PropTypes from 'prop-types'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport styles from './Contacts.module.css'\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts-actions'\r\n\r\nconst Contacts = ({contacts,onRemoveContact}) => (\r\n    // return(\r\n        <TransitionGroup \r\n            component=\"ul\" \r\n            className=\"ContactsList\"\r\n            >\r\n                <h2>Contacts</h2>\r\n                {contacts.map(({id,name,number})=>(\r\n                    <CSSTransition \r\n                        key={id}\r\n                        timeout={2500}\r\n                        classNames={styles}\r\n                        >\r\n                        <ContactsItem \r\n                            id={id}\r\n                            name={name}\r\n                            number={number}\r\n                            onRemove={()=>onRemoveContact(id)}\r\n                        />\r\n                    </CSSTransition>\r\n                ))}\r\n        </TransitionGroup>                       \r\n    // )\r\n)\r\n\r\nContacts.propTypes={\r\n    id:PropTypes.string,\r\n    name:PropTypes.string,\r\n    number:PropTypes.string,\r\n}\r\nContacts.defaultProps = {\r\n    id: '',\r\n    name: '',\r\n    number: '',\r\n}\r\n\r\nconst getVisibleContacts=(allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(({name})=>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  )\r\n}\r\n\r\nconst mapStateToProps =({ contacts: {items, filter}})=> ({\r\n    contacts: getVisibleContacts(items, filter),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onRemoveContact: (id) => dispatch(contactsActions.removeContact(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}