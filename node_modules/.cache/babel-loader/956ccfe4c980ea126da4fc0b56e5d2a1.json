{"ast":null,"code":"import { combineReducers } from 'redux';\nimport types from './contacts-types';\nimport { createReducer } from '@reduxjs/toolkit'; // const items = (state =[], { type, payload }) => {\n//     switch (type) {\n//         case types.ADD:\n//             return [...state, payload];            \n//         case types.REMOVE:\n//             return state.filter(({id}) => id !== payload);\n//         default: return state;}\n// }\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, {\n    payload\n  }) => [...state, payload],\n  [actions.removeContact]: (state, {\n    payload\n  }) => state.filter(({\n    id\n  }) => id !== payload)\n});\n\nconst filter = (state = '', {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case types.CHANGE_FILTER:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items,\n  filter\n}); // import { combineReducers } from \"redux\"\n// import { createReducer } from '@reduxjs/toolkit'\n// // import types from './contacts-types';\n// import actions from './contacts-actions'\n// const items = createReducer([], {\n//     [actions.addContact]: (state,{payload}) => [...state, payload],\n//     [actions.removeContact]: (state,{payload}) => state.filter(({id})=>id !== payload),\n// })\n// // const items = (state = [], {type, payload}) => {\n// //     switch (type) {\n// //         case types.ADD:\n// //             return [...state, payload];            \n// //         case types.REMOVE:\n// //             return state.filter(({id})=>id !== payload);\n// //         default:\n// //             return state;\n// //     }\n// // }\n// const filter = createReducer('', {\n//     [actions.changeFilter]: (_, {payload}) => payload,\n// })\n// // const filter = (state = '', {type, payload}) => {\n// //     switch (type) {\n// //         case 'contacts/ChangeFilter':\n// //             return payload;\n// //         default :\n// //             return state;            \n// //     }\n// // }\n// export default combineReducers({\n//     items,\n//     filter\n// })","map":{"version":3,"sources":["D:/projects/GitHub/goit-react-hw-06-phonebook/src/redux/contacts-reducer.js"],"names":["combineReducers","types","createReducer","items","actions","addContact","state","payload","removeContact","filter","id","type","CHANGE_FILTER"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,aAAT,QAA8B,kBAA9B,C,CAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA,MAAMC,KAAK,GAAGD,aAAa,CAAC,EAAD,EAAK;AAC5B,GAACE,OAAO,CAACC,UAAT,GAAsB,CAACC,KAAD,EAAO;AAACC,IAAAA;AAAD,GAAP,KAAqB,CAAC,GAAGD,KAAJ,EAAWC,OAAX,CADf;AAE5B,GAACH,OAAO,CAACI,aAAT,GAAyB,CAACF,KAAD,EAAO;AAACC,IAAAA;AAAD,GAAP,KAAqBD,KAAK,CAACG,MAAN,CAAa,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAQA,EAAE,KAAKH,OAA5B;AAFlB,CAAL,CAA3B;;AAKA,MAAME,MAAM,GAAG,CAACH,KAAK,GAAG,EAAT,EAAa;AAACK,EAAAA,IAAD;AAAOJ,EAAAA;AAAP,CAAb,KAAiC;AAC5C,UAAQI,IAAR;AACI,SAAKV,KAAK,CAACW,aAAX;AACI,aAAOL,OAAP;;AAEJ;AAAU,aAAOD,KAAP;AAJd;AAMH,CAPD;;AASA,eAAeN,eAAe,CAAC;AAC3BG,EAAAA,KAD2B;AAE3BM,EAAAA;AAF2B,CAAD,CAA9B,C,CAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from 'redux'\r\nimport types from './contacts-types'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\n\r\n\r\n// const items = (state =[], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [...state, payload];            \r\n\r\n//         case types.REMOVE:\r\n//             return state.filter(({id}) => id !== payload);\r\n\r\n//         default: return state;}\r\n// }\r\n\r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state,{payload}) => [...state, payload],\r\n    [actions.removeContact]: (state,{payload}) => state.filter(({id})=>id !== payload),\r\n})\r\n\r\nconst filter = (state = '', {type, payload}) => {\r\n    switch (type) {\r\n        case types.CHANGE_FILTER:\r\n            return payload;\r\n\r\n        default : return state;            \r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter\r\n})\r\n\r\n// import { combineReducers } from \"redux\"\r\n// import { createReducer } from '@reduxjs/toolkit'\r\n// // import types from './contacts-types';\r\n// import actions from './contacts-actions'\r\n\r\n// const items = createReducer([], {\r\n//     [actions.addContact]: (state,{payload}) => [...state, payload],\r\n//     [actions.removeContact]: (state,{payload}) => state.filter(({id})=>id !== payload),\r\n// })\r\n\r\n// // const items = (state = [], {type, payload}) => {\r\n// //     switch (type) {\r\n// //         case types.ADD:\r\n// //             return [...state, payload];            \r\n    \r\n// //         case types.REMOVE:\r\n// //             return state.filter(({id})=>id !== payload);\r\n\r\n// //         default:\r\n// //             return state;\r\n// //     }\r\n// // }\r\n\r\n// const filter = createReducer('', {\r\n//     [actions.changeFilter]: (_, {payload}) => payload,\r\n// })\r\n\r\n// // const filter = (state = '', {type, payload}) => {\r\n// //     switch (type) {\r\n// //         case 'contacts/ChangeFilter':\r\n// //             return payload;\r\n// //         default :\r\n// //             return state;            \r\n// //     }\r\n// // }\r\n\r\n// export default combineReducers({\r\n//     items,\r\n//     filter\r\n// })"]},"metadata":{},"sourceType":"module"}