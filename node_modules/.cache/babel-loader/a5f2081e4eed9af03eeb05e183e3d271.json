{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\projects\\\\GitHub\\\\goit-react-hw-06-phonebook\\\\src\\\\components\\\\ContactForm\\\\ContactForm.js\";\nimport React, { Component } from 'react'; // import { v4 as uuidv4 } from 'uuid';\n\nimport styles from './ContactForm.module.css';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts-actions'; // import Notification from '../Notification/Notification'\n// import { CSSTransition } from 'react-transition-group'\n\nclass ContactForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: '',\n      number: '',\n      message: null\n    };\n\n    this.handleInputChange = evt => {\n      const {\n        name,\n        value\n      } = evt.currentTarget;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.getNoty = note => {\n      this.setState({\n        message: note\n      });\n      setTimeout(() => {\n        this.setState({\n          message: null\n        });\n      }, 2500);\n    };\n\n    this.handleSubmit = evt => {\n      // const { name, number} = this.state;\n      evt.preventDefault();\n      console.log(this.state);\n      const name = evt.target.nameInput.value; // const number = e.target.elements.NumberInput.value;\n\n      if (this.props.contacts.find(item => item.name === name)) {\n        //   this.getNoty('already exust');\n        return console.log('уже есть');\n      }\n\n      this.props.onSubmit(this.state);\n      this.reset();\n    };\n\n    this.reset = () => {\n      this.setState({\n        name: '',\n        number: ''\n      });\n    };\n  }\n\n  render() {\n    // const { message }= this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        className: styles.form,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: styles.label,\n          htmlFor: this.nameInputId,\n          children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.input,\n            type: \"text\",\n            name: \"name\",\n            value: this.state.name,\n            onChange: this.handleInputChange,\n            id: this.nameInputId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: styles.label,\n          htmlFor: this.numberInputId,\n          children: [\"Number\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.input,\n            type: \"tel\",\n            name: \"number\",\n            value: this.state.number,\n            onChange: this.handleInputChange,\n            id: this.numberInputId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          type: \"submit\",\n          onClick: this.handleSubmit,\n          children: \"Add contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n} // const mapStateToProps = (state) => ({\n//   contacts: state.contacts,\n// })\n\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({\n    name,\n    number,\n    message\n  }) => dispatch(contactsActions.addContact(name, number, message))\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);","map":{"version":3,"sources":["D:/projects/GitHub/goit-react-hw-06-phonebook/src/components/ContactForm/ContactForm.js"],"names":["React","Component","styles","connect","contactsActions","ContactForm","state","name","number","message","handleInputChange","evt","value","currentTarget","setState","getNoty","note","setTimeout","handleSubmit","preventDefault","console","log","target","nameInput","props","contacts","find","item","onSubmit","reset","render","form","label","nameInputId","input","numberInputId","button","mapDispatchToProps","dispatch","addContact"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import { v4 as uuidv4 } from 'uuid';\r\nimport styles from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts-actions'\r\n\r\n// import Notification from '../Notification/Notification'\r\n// import { CSSTransition } from 'react-transition-group'\r\n\r\n\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n          name: '',\r\n          number: '',\r\n          message: null,   \r\n    }\r\n\r\n    // nameInputId = uuidv4();\r\n    // numberInputId = uuidv4();\r\n\r\n    handleInputChange=evt=>{\r\n      const {name, value}= evt.currentTarget;\r\n      this.setState({\r\n        [name]: value,\r\n      })\r\n    }\r\n\r\n\r\n    getNoty = (note) => {\r\n      this.setState({message: note});\r\n      setTimeout(()=> {\r\n        this.setState({ message: null});\r\n      }, 2500)\r\n    }\r\n\r\n    handleSubmit=evt=>{\r\n      // const { name, number} = this.state;\r\n        evt.preventDefault();\r\n        console.log(this.state);\r\n\r\n        const name = evt.target.nameInput.value;\r\n        // const number = e.target.elements.NumberInput.value;\r\n\r\n        if (this.props.contacts.find((item) => item.name === name)) {\r\n        //   this.getNoty('already exust');\r\n        return (\r\n          console.log('уже есть')\r\n        )\r\n        }\r\n\r\n        this.props.onSubmit(this.state);\r\n        this.reset()\r\n    }\r\n\r\n    reset=()=>{\r\n        this.setState({name: '', number: '',});\r\n    }\r\n    \r\n    render() {\r\n      // const { message }= this.state;\r\n        return (\r\n            <div>\r\n\r\n              {/* <CSSTransition\r\n          in={message} \r\n          timeout={250}\r\n          classNames=\"notification\"\r\n          unmountOnExit>\r\n            <Notification />\r\n        </CSSTransition>\r\n                 */}\r\n                <form \r\n                  onSubmit={this.handleSubmit}\r\n                  className={styles.form}>\r\n                  <label \r\n                    className={styles.label}\r\n                    htmlFor={this.nameInputId}>\r\n                        Name\r\n                    <input \r\n                      className={styles.input}\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      value={this.state.name}\r\n                      onChange={this.handleInputChange}\r\n                      id={this.nameInputId}\r\n                    />\r\n                  </label>\r\n                  <label \r\n                  className={styles.label}\r\n                  htmlFor={this.numberInputId}>\r\n                      Number\r\n                    <input \r\n                      className={styles.input}\r\n                      type=\"tel\"\r\n                      name=\"number\"\r\n                      value={this.state.number}\r\n                      onChange={this.handleInputChange}\r\n                      id={this.numberInputId}\r\n                    />\r\n                  </label>\r\n                  <button \r\n                    className={styles.button}\r\n                    type=\"submit\" \r\n                    onClick={this.handleSubmit}\r\n                  >\r\n                    Add contact\r\n                  </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contacts: state.contacts,\r\n// })\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: ({name,number,message}) => dispatch(contactsActions.addContact(name,number,message))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm)\r\n\r\n"]},"metadata":{},"sourceType":"module"}