{"ast":null,"code":"import { createStore } from 'redux';\nconst initialState = {\n  contacts: [],\n  showNoty: false,\n  name: '',\n  number: ''\n};\n\nconst reducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case 'contacts/Remove':\n      console.log('remove');\n\n    case 'contacts/Add':\n      console.log('add', state);\n    // if (state.contacts.find((item)=>item.name===payload.contact.name)) {\n    //     this.initialState.setState({showNoty: true})\n    //         setTimeout(() => this.setState({showNoty: false}), 3000)      \n    // } else {\n    //     this.initialState.setState(prevState=>({\n    //         contacts: [payload, ...prevState.contacts],\n    //     }))\n    // }\n    // this.setState(prevState=>{\n    //     return{\n    //         contacts: prevState.contacts.filter(({id})=>id !== payload),\n    //         filter: '',\n    //     }\n    // })  \n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\nexport default store;","map":{"version":3,"sources":["D:/projects/GitHub/goit-react-hw-06-phonebook/src/redux/store.js"],"names":["createStore","initialState","contacts","showNoty","name","number","reducer","state","type","payload","console","log","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,QAAQ,EAAE,KAFO;AAGjBC,EAAAA,IAAI,EAAE,EAHW;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuB;AAACO,EAAAA,IAAD;AAAMC,EAAAA;AAAN,CAAvB,KAA0C;AACtD,UAAOD,IAAP;AACI,SAAK,iBAAL;AACIE,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACJ,SAAK,cAAL;AACID,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBJ,KAAnB;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGR;AAAU,aAAOA,KAAP;AAvBd;AAyBH,CA1BD;;AA4BA,MAAMK,KAAK,GAAGZ,WAAW,CAACM,OAAD,CAAzB;AAEA,eAAeM,KAAf","sourcesContent":["import { createStore } from 'redux';\r\n\r\nconst initialState = {\r\n    contacts: [], \r\n    showNoty: false,\r\n    name: '',\r\n    number: '',\r\n}\r\n\r\nconst reducer = (state = initialState, {type,payload}) => {\r\n    switch(type) {\r\n        case 'contacts/Remove' :\r\n            console.log('remove');\r\n        case 'contacts/Add' :\r\n            console.log('add', state);\r\n                // if (state.contacts.find((item)=>item.name===payload.contact.name)) {\r\n                //     this.initialState.setState({showNoty: true})\r\n                //         setTimeout(() => this.setState({showNoty: false}), 3000)      \r\n                // } else {\r\n                //     this.initialState.setState(prevState=>({\r\n                //         contacts: [payload, ...prevState.contacts],\r\n                //     }))\r\n                // }\r\n        \r\n\r\n                // this.setState(prevState=>{\r\n                //     return{\r\n                //         contacts: prevState.contacts.filter(({id})=>id !== payload),\r\n                //         filter: '',\r\n                //     }\r\n                // })  \r\n            \r\n            \r\n        default : return state;    \r\n    }\r\n}\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}